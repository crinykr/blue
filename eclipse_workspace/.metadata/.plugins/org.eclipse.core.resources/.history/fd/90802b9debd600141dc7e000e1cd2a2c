//    preprocess        compile        assemble        linking
//*.c ----------> *.i ----------> *.s ----------> *.o ----------> *.out

#include "builtinshell.h"
#include "console.h"
#include "keyboard.h"
#include "util.h"
#include "pit.h"
#include "asm_util.h"
#include "task.h"
#include "synchronization.h"
#include "local_apic.h"
#include "multiprocessor.h"
#include "io_apic.h"
#include "fault.h"
#include "syscall.h"
#include "list.h"
#include "scheduler.h"
#include "printk.h"

extern volatile QWORD jiffies;

static cmd_entry_t cmd_table[] = {

{ "ct", cmd_create_test_task },

{ "ps", cmd_ps },

{ "killtask", cmd_kill_task },

{ "testmutex_t", cmd_test_mutex },

{ "testthread", cmd_test_thread },

{ "testpie", cmd_test_pie },

};

void builtin_shell(void) {
	char cmd_buf[SHELL_CMDBUF_MAX];
	int cmd_buf_index = 0;
	BYTE key;

	printk("\n" SHELL_PROMPT);

	while (1) {
		switch (key = getch()) {
		case KEY_LSHIFT:
		case KEY_RSHIFT:
		case KEY_CAPSLOCK:
		case KEY_NUMLOCK:
		case KEY_SCROLLLOCK:
			break;

		case KEY_BACKSPACE:
			if (cmd_buf_index > 0) {
				printk("\b");
				cmd_buf_index--;
			}

			break;
		case KEY_ENTER:
			printk("\n");

			if (cmd_buf_index > 0) {
				cmd_buf[cmd_buf_index] = '\0';
				run_cmd(cmd_buf);
			}

			printk("%s", SHELL_PROMPT);
			memset(cmd_buf, '\0', SHELL_CMDBUF_MAX);
			cmd_buf_index = 0;

			break;
		default:
			if (key == KEY_TAB) {
				key = ' ';
			}

			if (cmd_buf_index < SHELL_CMDBUF_MAX) {
				cmd_buf[cmd_buf_index++] = key;
				printk("%c", key);
			}
		}
	}
}

static void run_cmd(const char* cmd_buf) {
	int i, space_index;
	int cmd_buf_len, cmd_len;
	int count;

	// trim and parsing
	cmd_buf_len = strlen(cmd_buf);
	for (space_index = 0; space_index < cmd_buf_len; space_index++) {
		if (cmd_buf[space_index] == ' ') {
			break;
		}
	}

	// search cmd in cmd_table
	count = sizeof(cmd_table) / sizeof(cmd_entry_t);
	for (i = 0; i < count; i++) {
		cmd_len = strlen(cmd_table[i].cmd);
		if ((cmd_len == space_index)
				&& (memcmp(cmd_table[i].cmd, cmd_buf, space_index) == 0)) {
			cmd_table[i].handler(cmd_buf + space_index + 1);
			break;
		}
	}

	// print error
	if (i >= count) {
		printk("'%s' is not found.\n", cmd_buf);
	}
}

static void param_init(param_list_t *param_list, const char* param) {
	param_list->buf = param;
	param_list->len = strlen(param);
	param_list->cur_pos = 0;
}

static int next_param(param_list_t* param_list, char* param) {
	int i, len;

	// if has no more parameter, just return
	if (param_list->len <= param_list->cur_pos) {
		return 0;
	}

	// find index of ' '
	for (i = param_list->cur_pos; i < param_list->len; i++) {
		if (param_list->buf[i] == ' ') {
			break;
		}
	}

	// copy parameter
	memcpy(param, param_list->buf + param_list->cur_pos, i);
	len = i - param_list->cur_pos;
	param[len] = '\0';

	// update position in parameter buffer
	param_list->cur_pos += len + 1;
	return len;
}

/* **********************************************************
 *  Built-in Command List
 * **********************************************************/

void print_task(tcb_t *task) {
	if (!task) {
		printk("No Task\n");
	} else {
		printk("hello");
		/*
		printk("%d %d %s %d", task->id, task->parent_process->id, task->name,
				task->core);
		printk(" %x %x", task->pml4, task->stack_addr);
		printk(" %d %x\n", task->fpu_used, task->flags);*/
	}
}

extern scheduler_t scheduler;

/*static*/void cmd_ps(const char* param_buf) {
	list_node_t *cur;
	int i;

	// print on-core task
	printk("core-0: ");
	print_task(scheduler.cur_task[0]);
	printk("core-1: ");
	print_task(scheduler.cur_task[1]);
	printk("core-2: ");
	print_task(scheduler.cur_task[2]);
	printk("core-3: ");
	print_task(scheduler.cur_task[3]);

	// print ready task
	int count = ready_task_count();

	if (!count) {
		printk("no ready task\n");
	} else {
		printk("ready task count: %d\n", count);

		for (cur = scheduler.ready_list.head, i = 0; cur;
				cur = cur->next, i++) {
			printk("ready-%d: ", i);
			print_task(cur->value);
		}
	}
}

static void cmd_kill_task(const char* param_buf) {
	/*	PARAMETERlist_t param_list;
	 char vcID[30];
	 QWORD id;
	 tcb_t* psttcb_t;
	 int i;

	 // 파라미터를 추출
	 param_init(&param_list, param_buf);
	 next_param(&param_list, vcID);

	 // 태스크를 종료
	 if (memcmp(vcID, "0x", 2) == 0) {
	 id = atoi(vcID + 2, 16);
	 } else {
	 id = atoi(vcID, 10);
	 }

	 // 특정 ID만 종료하는 경우
	 if (id != 0xFFFFFFFF) {
	 psttcb_t = get_tcb(TCBOFFSET(id));
	 id = psttcb_t->link.id;

	 // 시스템 테스트는 제외
	 if (((id >> 32) != 0)
	 && ((psttcb_t->flags & TASK_FLAGS_SYSTEM) == 0x00)) {
	 printk("Kill Task ID [0x%q] ", id);
	 if (kill_task(id) == TRUE) {
	 printk("Success\n");
	 } else {
	 printk("Fail\n");
	 }
	 } else {
	 printk("Task does not exist or task is system task\n");
	 }
	 }
	 // 콘솔 셸과 유휴 태스크를 제외하고 모든 태스크 종료
	 else {
	 for (i = 0; i < TASK_MAXCOUNT; i++) {
	 psttcb_t = get_tcb(i);
	 id = psttcb_t->link.id;

	 // 시스템 테스트는 삭제 목록에서 제외
	 if (((id >> 32) != 0)
	 && ((psttcb_t->flags & TASK_FLAGS_SYSTEM) == 0x00)) {
	 printk("Kill Task ID [0x%q] ", id);
	 if (kill_task(id) == TRUE) {
	 printk("Success\n");
	 } else {
	 printk("Fail\n");
	 }
	 }
	 }
	 }
	 */
}

static void test_task1() {
	int i;
	while (1) {
		//printk("test task1 %d\n", i++);
		sleep(100);
	}
}
static void cmd_create_test_task(const char* param_buf) {
	param_list_t param_list;
	char count[30];
	int i;

	param_init(&param_list, param_buf);
	next_param(&param_list, count);

	for (i = 0; i < atoi(count); i++) {
		if (create_task(NULL, 0, 0, (QWORD) test_task1) == NULL) {
			break;
		}
	}
}

// 뮤텍스 테스트용 뮤텍스와 변수
static mutex_t mutex;
static volatile QWORD adder;

/**
 *  뮤텍스를 테스트하는 태스크
 */
static void number_print_task(void) {
	int i;
	int j;
	QWORD tick_count;

// 50ms 정도 대기하여 콘솔 셸이 출력하는 메시지와 겹치지 않도록 함
	tick_count = jiffies;
	while ((jiffies - tick_count) < 50) {
		schedule();
	}

// 루프를 돌면서 숫자를 출력
	for (i = 0; i < 5; i++) {
		mutex_lock(&(mutex));
		printk("Task ID [0x%Q] Value[%d]\n", get_cur_task(get_lapic_id())->id,
				adder);

		adder += 1;
		mutex_unlock(&(mutex));

		// 프로세서 소모를 늘리려고 추가한 코드
		for (j = 0; j < 30000; j++)
			;
	}

// 모든 태스크가 종료할 때까지 1초(100ms) 정도 대기
	tick_count = jiffies;
	while ((jiffies - tick_count) < 1000) {
		schedule();
	}

// 태스크 종료
//kill_me();
}

/**
 *  뮤텍스를 테스트하는 태스크 생성
 */
static void cmd_test_mutex(const char* param_buf) {
	int i;

	adder = 1;

// 뮤텍스 초기화
	mutex_init(&mutex);

	for (i = 0; i < 3; i++) {
		// 뮤텍스를 테스트하는 태스크를 3개 생성
		create_task(TASK_FLAGS_THREAD, 0, 0, (QWORD) number_print_task);
	}
	printk("Wait Util %d Task End...\n", i);
	getch();
}

/**
 *  태스크 2를 자신의 스레드로 생성하는 태스크
 */
static void thread_test_task(void) {
	int i;

	for (i = 0; i < 3; i++) {
		create_task(TASK_FLAGS_THREAD, 0, 0, (QWORD) NULL);
	}

	while (1) {
		sleep(1);
	}
}

/**
 *  스레드를 테스트하는 태스크 생성
 */
static void cmd_test_thread(const char* param_buf) {
	tcb_t* pstProcess;

	pstProcess = create_task(TASK_FLAGS_PROCESS, (void *) 0xEEEEEEEE, 0x1000,
			(QWORD) thread_test_task);
	if (pstProcess != NULL) {
		printk("Process [0x%Q] Create Success\n", pstProcess->id);
	} else {
		printk("Process Create Fail\n");
	}
}

// 난수를 발생시키기 위한 변수
static volatile QWORD random_val = 0;

/**
 *  임의의 난수를 반환
 */

static QWORD get_random(void) {
	random_val = (random_val * 412153 + 5571031) >> 16;
	return random_val;
}

/**
 *  FPU를 테스트하는 태스크
 */
static void fpu_test_task(void) {
	double value1;
	double value2;
	tcb_t* cur_task;
	QWORD qcount = 0;
	QWORD random_val;
	int i;
	int offset;
	char data[4] = { '-', '\\', '|', '/' };
	struct console_char* screen;

	screen = (struct console_char*) vga_console.screen;

	cur_task = get_cur_task(get_lapic_id());

// 자신의 ID를 얻어서 화면 오프셋으로 사용
	offset = (cur_task->id & 0xFFFFFFFF) * 2;
	offset = CONSOLE_WIDTH * CONSOLE_HEIGHT
			- (offset % (CONSOLE_WIDTH * CONSOLE_HEIGHT));

// 루프를 무한히 반복하면서 동일한 계산을 수행
	while (1) {
		value1 = 1;
		value2 = 1;

		// 테스트를 위해 동일한 계산을 2번 반복해서 실행
		for (i = 0; i < 10; i++) {
			random_val = get_random();
			value1 *= (double) random_val;
			value2 *= (double) random_val;

			sleep(1);

			random_val = get_random();
			value1 /= (double) random_val;
			value2 /= (double) random_val;
		}

		if (value1 != value2) {
			printk("Value Is Not Same~!!! [%f] != [%f]\n", value1, value2);
			break;
		}
		qcount++;

		// 회전하는 바람개비를 표시
		screen[offset].letter = data[qcount % 4];
		// 색깔 지정
		screen[offset].attr = (offset % 15) + 1;

	}
}

/**
 *  원주율(PIE)를 계산
 */
static void cmd_test_pie(const char* param_buf) {
	double result;
	int i;

	printk("PIE Cacluation Test\n");
	printk("Result: 355 / 113 = ");
	result = (double) 355 / 113;
	printk("%d.%d%d\n", (QWORD) result, ((QWORD) (result * 10) % 10),
			((QWORD) (result * 100) % 10));

// 실수를 계산하는 태스크를 생성
	for (i = 0; i < 100; i++) {
		create_task(TASK_FLAGS_THREAD, 0, 0, (QWORD) fpu_test_task);
	}
}
