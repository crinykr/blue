#include "task.h"
#include "gdt.h"
#include "multiprocessor.h"
#include "scheduler.h"
#include "dynamic.h"
#include "list.h"
#include "synchronization.h"
#include "util.h"

extern scheduler_t scheduler[CORE_COUNT];

tcb_t* create_task(QWORD flags, void* mem_addr, QWORD mem_size,
QWORD entry_addr) {
	tcb_t *task, *cur_task;
	void* stack_addr;
	BYTE core;

	core = get_core_num();

	task = kmalloc(sizeof(tcb_t));
	memset(task, 0, sizeof(tcb_t));
	stack_addr = kmalloc(KERNEL_STACK_SIZE);

	/*
	 * lock start
	 */
	spinlock_lock(&(scheduler[core].spinlock));

	cur_task = get_proc_if_thread(get_cur_task(core));

	// if thread creation
	if (flags & TASK_FLAGS_THREAD) {
		task->parent_process = cur_task;
		task->mem_addr = cur_task->mem_addr;
		task->mem_size = cur_task->mem_size;

		list_add_to_tail(&(cur_task->child_list), &(task->thread_link));
	}
	// else, it's process creation
	else {
		task->parent_process = cur_task;
		task->mem_addr = mem_addr;
		task->mem_size = mem_size;

		list_init(&(task->child_list));
	}

	task->name = strdup("unknown");

	spinlock_unlock(&(scheduler[core].spinlock));
	/*
	 * lock end
	 */

	setup_task(task, flags, entry_addr, stack_addr,
	KERNEL_STACK_SIZE);

	task->fpu_used = FALSE;
	task->core = core;
	task->sched_link.value = task;

	add_task_to_ready_list(task); // criny
	return task;
}

void setup_task(tcb_t* task, QWORD flags, QWORD entry_addr, void* stack_addr,
QWORD stack_size) {
	memset(&(task->context), 0, sizeof(regs_t));

	task->context.rsp = (QWORD ) stack_addr + stack_size - 8;
	task->context.rbp = (QWORD ) stack_addr + stack_size - 8;
	task->context.rip = entry_addr;

	// set IE(9) : Enable interrupt receive
	// set 3 to IOPL(12-13) : Enable I/O access in user level
	task->context.rflags |= 0x3200; // criny

	if ((flags & TASK_FLAGS_USERLEVEL) == 0) {
		task->context.cs = GDT_KERNELCODESEGMENT | SELECTOR_RPL_0;
		task->context.ds = GDT_KERNELDATASEGMENT | SELECTOR_RPL_0;
		task->context.es = GDT_KERNELDATASEGMENT | SELECTOR_RPL_0;
		task->context.fs = GDT_KERNELDATASEGMENT | SELECTOR_RPL_0;
		task->context.gs = GDT_KERNELDATASEGMENT | SELECTOR_RPL_0;
		task->context.ss = GDT_KERNELDATASEGMENT | SELECTOR_RPL_0;
	} else {
		task->context.cs = GDT_USERCODESEGMENT | SELECTOR_RPL_3;
		task->context.ds = GDT_USERDATASEGMENT | SELECTOR_RPL_3;
		task->context.es = GDT_USERDATASEGMENT | SELECTOR_RPL_3;
		task->context.fs = GDT_USERDATASEGMENT | SELECTOR_RPL_3;
		task->context.gs = GDT_USERDATASEGMENT | SELECTOR_RPL_3;
		task->context.ss = GDT_USERDATASEGMENT | SELECTOR_RPL_3;
	}

	// set task exit gate
	*(QWORD *) ((QWORD) stack_addr + stack_size - 8) = (QWORD ) kill_me;

	task->stack_addr = stack_addr;
	task->stack_size = stack_size;
	task->flags = flags;
}

extern pml4_t *kernel_pml4;

void be_a_init(void) {
	tcb_t* task;
	int core;

	core = get_core_num();

	task = kmalloc(sizeof(tcb_t));
	memset(task, 0, sizeof(tcb_t));

	// set attribute
	task->id = 1;
	task->name = strdup("init");
	task->parent_process = task; // if parent_process is itself, it's must init process
	task->core = core;
	task->flags = TASK_FLAGS_LOWEST | TASK_FLAGS_PROCESS | TASK_FLAGS_SYSTEM
			| TASK_FLAGS_IDLE;
	task->sched_link.value = task;
	task->pml4 = kernel_pml4;

	switch_pml4(task->pml4);

	// register in scheduler
	set_cur_task(0, task);

	printk("Init task created\n");
}

